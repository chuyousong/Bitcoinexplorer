<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.cys.bitcoinexplorer.dao.BlockMapper">
  <resultMap id="BaseResultMap" type="io.cys.bitcoinexplorer.po.Block">
    <id column="blockhash" jdbcType="CHAR" property="blockhash" />
    <result column="number_of_transactions" jdbcType="INTEGER" property="numberOfTransactions" />
    <result column="output_total" jdbcType="DOUBLE" property="outputTotal" />
    <result column="estimated_transaction_volume" jdbcType="INTEGER" property="estimatedTransactionVolume" />
    <result column="transaction_fees" jdbcType="DOUBLE" property="transactionFees" />
    <result column="height" jdbcType="INTEGER" property="height" />
    <result column="time" jdbcType="TIMESTAMP" property="time" />
    <result column="relayedy" jdbcType="VARCHAR" property="relayedy" />
    <result column="difficulty" jdbcType="DOUBLE" property="difficulty" />
    <result column="bits" jdbcType="VARCHAR" property="bits" />
    <result column="size" jdbcType="INTEGER" property="size" />
    <result column="weight" jdbcType="REAL" property="weight" />
    <result column="version" jdbcType="INTEGER" property="version" />
    <result column="nonce" jdbcType="INTEGER" property="nonce" />
    <result column="block_reward" jdbcType="DOUBLE" property="blockReward" />
    <result column="previous_block" jdbcType="CHAR" property="previousBlock" />
    <result column="next_block" jdbcType="CHAR" property="nextBlock" />
  </resultMap>
  <resultMap id="BlockGetDTO" type="io.cys.bitcoinexplorer.dto.BlockGetDTO">
    <id column="blockhash" jdbcType="CHAR" property="blockhash" />
    <result column="number_of_transactions" jdbcType="INTEGER" property="numberOfTransactions" />
    <result column="output_total" jdbcType="DOUBLE" property="outputTotal" />
    <result column="estimated_transaction_volume" jdbcType="INTEGER" property="estimatedTransactionVolume" />
    <result column="transaction_fees" jdbcType="DOUBLE" property="transactionFees" />
    <result column="height" jdbcType="INTEGER" property="height" />
    <result column="time" jdbcType="TIMESTAMP" property="time" />
    <result column="relayedy" jdbcType="VARCHAR" property="relayedy" />
    <result column="difficulty" jdbcType="DOUBLE" property="difficulty" />
    <result column="bits" jdbcType="VARCHAR" property="bits" />
    <result column="size" jdbcType="INTEGER" property="size" />
    <result column="weight" jdbcType="REAL" property="weight" />
    <result column="version" jdbcType="INTEGER" property="version" />
    <result column="nonce" jdbcType="INTEGER" property="nonce" />
    <result column="block_reward" jdbcType="DOUBLE" property="blockReward" />
    <result column="previous_block" jdbcType="CHAR" property="previousBlock" />
    <result column="next_block" jdbcType="CHAR" property="nextBlock" />
  </resultMap>
  <sql id="Base_Column_List">
    blockhash, number_of_transactions, output_total, estimated_transaction_volume, transaction_fees, 
    height, time, relayedy, difficulty, bits, size, weight, version, nonce, block_reward, 
    previous_block, next_block
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_block
    where blockhash = #{blockhash,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from tb_block
    where blockhash = #{blockhash,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="io.cys.bitcoinexplorer.po.Block">
    insert into tb_block (blockhash, number_of_transactions, output_total, 
      estimated_transaction_volume, transaction_fees, 
      height, time, relayedy, 
      difficulty, bits, size, 
      weight, version, nonce, 
      block_reward, previous_block, next_block
      )
    values (#{blockhash,jdbcType=CHAR}, #{numberOfTransactions,jdbcType=INTEGER}, #{outputTotal,jdbcType=DOUBLE}, 
      #{estimatedTransactionVolume,jdbcType=INTEGER}, #{transactionFees,jdbcType=DOUBLE}, 
      #{height,jdbcType=INTEGER}, #{time,jdbcType=TIMESTAMP}, #{relayedy,jdbcType=VARCHAR}, 
      #{difficulty,jdbcType=DOUBLE}, #{bits,jdbcType=VARCHAR}, #{size,jdbcType=INTEGER}, 
      #{weight,jdbcType=REAL}, #{version,jdbcType=INTEGER}, #{nonce,jdbcType=INTEGER}, 
      #{blockReward,jdbcType=DOUBLE}, #{previousBlock,jdbcType=CHAR}, #{nextBlock,jdbcType=CHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="io.cys.bitcoinexplorer.po.Block">
    insert into tb_block
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="blockhash != null">
        blockhash,
      </if>
      <if test="numberOfTransactions != null">
        number_of_transactions,
      </if>
      <if test="outputTotal != null">
        output_total,
      </if>
      <if test="estimatedTransactionVolume != null">
        estimated_transaction_volume,
      </if>
      <if test="transactionFees != null">
        transaction_fees,
      </if>
      <if test="height != null">
        height,
      </if>
      <if test="time != null">
        time,
      </if>
      <if test="relayedy != null">
        relayedy,
      </if>
      <if test="difficulty != null">
        difficulty,
      </if>
      <if test="bits != null">
        bits,
      </if>
      <if test="size != null">
        size,
      </if>
      <if test="weight != null">
        weight,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="nonce != null">
        nonce,
      </if>
      <if test="blockReward != null">
        block_reward,
      </if>
      <if test="previousBlock != null">
        previous_block,
      </if>
      <if test="nextBlock != null">
        next_block,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="blockhash != null">
        #{blockhash,jdbcType=CHAR},
      </if>
      <if test="numberOfTransactions != null">
        #{numberOfTransactions,jdbcType=INTEGER},
      </if>
      <if test="outputTotal != null">
        #{outputTotal,jdbcType=DOUBLE},
      </if>
      <if test="estimatedTransactionVolume != null">
        #{estimatedTransactionVolume,jdbcType=INTEGER},
      </if>
      <if test="transactionFees != null">
        #{transactionFees,jdbcType=DOUBLE},
      </if>
      <if test="height != null">
        #{height,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="relayedy != null">
        #{relayedy,jdbcType=VARCHAR},
      </if>
      <if test="difficulty != null">
        #{difficulty,jdbcType=DOUBLE},
      </if>
      <if test="bits != null">
        #{bits,jdbcType=VARCHAR},
      </if>
      <if test="size != null">
        #{size,jdbcType=INTEGER},
      </if>
      <if test="weight != null">
        #{weight,jdbcType=REAL},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
      <if test="nonce != null">
        #{nonce,jdbcType=INTEGER},
      </if>
      <if test="blockReward != null">
        #{blockReward,jdbcType=DOUBLE},
      </if>
      <if test="previousBlock != null">
        #{previousBlock,jdbcType=CHAR},
      </if>
      <if test="nextBlock != null">
        #{nextBlock,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="io.cys.bitcoinexplorer.po.Block">
    update tb_block
    <set>
      <if test="numberOfTransactions != null">
        number_of_transactions = #{numberOfTransactions,jdbcType=INTEGER},
      </if>
      <if test="outputTotal != null">
        output_total = #{outputTotal,jdbcType=DOUBLE},
      </if>
      <if test="estimatedTransactionVolume != null">
        estimated_transaction_volume = #{estimatedTransactionVolume,jdbcType=INTEGER},
      </if>
      <if test="transactionFees != null">
        transaction_fees = #{transactionFees,jdbcType=DOUBLE},
      </if>
      <if test="height != null">
        height = #{height,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        time = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="relayedy != null">
        relayedy = #{relayedy,jdbcType=VARCHAR},
      </if>
      <if test="difficulty != null">
        difficulty = #{difficulty,jdbcType=DOUBLE},
      </if>
      <if test="bits != null">
        bits = #{bits,jdbcType=VARCHAR},
      </if>
      <if test="size != null">
        size = #{size,jdbcType=INTEGER},
      </if>
      <if test="weight != null">
        weight = #{weight,jdbcType=REAL},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="nonce != null">
        nonce = #{nonce,jdbcType=INTEGER},
      </if>
      <if test="blockReward != null">
        block_reward = #{blockReward,jdbcType=DOUBLE},
      </if>
      <if test="previousBlock != null">
        previous_block = #{previousBlock,jdbcType=CHAR},
      </if>
      <if test="nextBlock != null">
        next_block = #{nextBlock,jdbcType=CHAR},
      </if>
    </set>
    where blockhash = #{blockhash,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="io.cys.bitcoinexplorer.po.Block">
    update tb_block
    set number_of_transactions = #{numberOfTransactions,jdbcType=INTEGER},
      output_total = #{outputTotal,jdbcType=DOUBLE},
      estimated_transaction_volume = #{estimatedTransactionVolume,jdbcType=INTEGER},
      transaction_fees = #{transactionFees,jdbcType=DOUBLE},
      height = #{height,jdbcType=INTEGER},
      time = #{time,jdbcType=TIMESTAMP},
      relayedy = #{relayedy,jdbcType=VARCHAR},
      difficulty = #{difficulty,jdbcType=DOUBLE},
      bits = #{bits,jdbcType=VARCHAR},
      size = #{size,jdbcType=INTEGER},
      weight = #{weight,jdbcType=REAL},
      version = #{version,jdbcType=INTEGER},
      nonce = #{nonce,jdbcType=INTEGER},
      block_reward = #{blockReward,jdbcType=DOUBLE},
      previous_block = #{previousBlock,jdbcType=CHAR},
      next_block = #{nextBlock,jdbcType=CHAR}
    where blockhash = #{blockhash,jdbcType=CHAR}
  </update>

  <!--sql-->
  <select id="getSelectListBlockhashs" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from tb_block
    order by  rand()
    limit 5
  </select>
  <select id="getListByHeight" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from tb_block
    where height = #{height,jdbcType=CHAR}
  </select>
  <select id="getListByBlockhash" parameterType="java.lang.String" resultMap="BlockGetDTO">
    select * from tb_block where blockhash = #{blockhash}
  </select>

</mapper>